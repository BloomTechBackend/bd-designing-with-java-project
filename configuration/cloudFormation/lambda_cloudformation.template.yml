# IF YOU'RE A PARTICIPANT PLEASE DON"T MAKE ANY MODIFICATIONS TO THIS FILE AS IT MIGHT RESULT IN YOUR
# SERVICE NOT WORKING PROPERLY OR NOT WORKING AT ALL!
---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template configuring shipment functionality in Lambda fronted by API Gateway
Outputs:
  StackArn:
    Description: Use this as the stack_arn in your cloud_formation_deployment_stack
      override.
    Value: {Ref: 'AWS::StackId'}
  ApiId:
    Description: The ApiId of your APIGateway RestAPI
    Value: {Ref: 'LambdaAPIDefinition'}
  ApiStage:
    Description: Your APIGateway stage
    Value: {Ref: 'LambdaAPIDefinitionStage'}
Parameters:
  AttachLambdaFunctionToVPC: { Type: String, Default: 'false', AllowedValues: ['true', 'false']}
  Stage: {Type: String, Default: ''}
  UseBatsKeyParam: {Type: String, Default: 'false', AllowedValues: ['true','false']}
  DeploymentBucketImportName:
    Type: String
    Default: "DeploymentBucket"
Conditions:
  UseBatsKey:
    'Fn::Equals':
      - {Ref: UseBatsKeyParam}
      - 'true'
  RunLambdaInVPC:
    Fn::Equals: [ {Ref: AttachLambdaFunctionToVPC}, "true"]
Resources:
  LambdaAPIDefinition:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: {Ref: Stage}
      DefinitionBody: REPLACE_WITH_SWAGGER_DEFINITION
  APIGatewayExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [apigateway.amazonaws.com]
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action: ['lambda:Invoke*']
                Effect: Allow
                Resource:
                  Fn::GetAtt: [LambdaFunction, Arn]
            Version: '2012-10-17'
          PolicyName: apigInvokeLambda
    Type: AWS::IAM::Role
  LambdaSecurityGroup:
    Condition: RunLambdaInVPC
    Metadata: {Comment: ''}
    Properties:
      GroupDescription: Allow all outbound access
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: '0'
          IpProtocol: tcp
          ToPort: '65535'
      Tags:
        - Key: Name
          Value: "Lambda VPC security group"
      VpcId: {'Fn::ImportValue': VPC}
    Type: AWS::EC2::SecurityGroup
  LambdaFunction:
    Properties:
      CodeUri:
        Bucket: {'Fn::If' : ['UseBatsKey', 'BATS::SAM::CodeS3Bucket', {"Fn::ImportValue" : {Ref: 'DeploymentBucketImportName'}}]}
        Key: BATS::SAM::CodeS3Key
      Events:
        APIG:
          Properties:
            Method: ANY
            Path: /
            RestApiId: {Ref: LambdaAPIDefinition}
          Type: Api
      Handler: com.amazon.atacurriculumsustainabilityshipmentservicelambda.activity.ShipmentServiceLambdaEntryPoint::handleRequest
      MemorySize: 512
      Role:
        Fn::GetAtt: [LambdaRole, Arn]
      Runtime: java8
      Timeout: 30
      VpcConfig:
        Fn::If:
          - RunLambdaInVPC
          - SecurityGroupIds: [{Ref: LambdaSecurityGroup}]
            SubnetIds:
              - {'Fn::ImportValue': PrivateSubnet01}
              - {'Fn::ImportValue': PrivateSubnet02}
          - {Ref: 'AWS::NoValue'}
    Type: AWS::Serverless::Function
  LambdaRole:
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - "Fn::If": [
          "HasXRay",
          {"Fn::Sub": 'arn:${AWS::Partition}:iam::aws:policy/AWSXrayWriteOnlyAccess'},
          {Ref: 'AWS::NoValue'}
        ]
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  LambdaLogGroup:
    DependsOn: LambdaFunction
    Properties:
      LogGroupName: {"Fn::Sub": "/aws/lambda/${LambdaFunction}"} # Default lambda log group naming format
    Type: AWS::Logs::LogGroup